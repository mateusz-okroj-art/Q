# This is a basic workflow to help you get started with Actions

name: Rolling build

# Controls when the workflow will run
on:
  
  push:
    branches: [ main, feature/*, fix/*, release/* ]
    
  pull_request:
    branches-ignore: [ main, feature/*, fix/*, release/* ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
  
    strategy:
      matrix:
        runsOn: [ "ubuntu-latest", "windows-latest", "macOs-latest" ]
  
    # The type of runner that the job will run on
    runs-on: ${{ matrix.runsOn }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3.0.8
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: out/build/*
          # An explicit key for restoring and saving the cache
          key: RollingBuildCI-${{ matrix.runsOn }}
          
      - name: Configure Visual Studio
        if: matrix.runsOn == 'windows-latest'
        # You may pin to the exact commit or the version.
        # uses: egor-tensin/vs-shell@9a932a62d05192eae18ca370155cf877eecc2202
        uses: egor-tensin/vs-shell@v2
        
      - name: Install Clang
        if: matrix.runsOn != 'windows-latest'
        # You may pin to the exact commit or the version.
        # uses: egor-tensin/setup-clang@01d437c0618e76d3c44e7d58f5d175c75cb37bac
        uses: egor-tensin/setup-clang@v1
        
      - name: Configure
        run: cmake --preset x64-debug .
        
      - name: Build
        working-directory: out/build/x64-debug
        run: cmake --build .
